{"version":3,"sources":["js/timer.js","index.js"],"names":["daysEl","document","querySelector","hoursEl","minsEl","secsEl","CountdownTimer","constructor","targetDate","init","stop","getDeltaTime","intervalId","setInterval","deltaTime","Date","now","getTimeComponents","clearInterval","time","days","Math","floor","hours","pad","mins","secs","updateClockface","value","String","padStart","textContent","timer","selector"],"mappings":";;;AAAA,MAAMA,EAASC,SAASC,cAAc,uBAChCC,EAAUF,SAASC,cAAc,wBACjCE,EAASH,SAASC,cAAc,uBAChCG,EAASJ,SAASC,cAAc,uBAEtC,MAAMI,EACJC,aAAY,WAAEC,GAAe,IACtBA,KAAAA,WAAaA,EACbC,KAAAA,OACAC,KAAAA,OAGPD,OACOE,KAAAA,eACAC,KAAAA,WAAaC,YAAY,KACvBF,KAAAA,gBACJ,KAGLA,eACQG,MAAAA,EAAY,KAAKN,WAAaO,KAAKC,MAErCF,GADCG,KAAAA,kBAAkBH,GACnBA,GAAa,EAGf,OAFAI,cAAc,KAAKN,iBACnBK,kBAAkB,GAKtBA,kBAAkBE,GACVC,MAAAA,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQ,KAAKC,IAAIH,KAAKC,MAAOH,EAAQ,MAAyB,OAC9DM,EAAO,KAAKD,IAAIH,KAAKC,MAAOH,EAAQ,KAAoB,MACxDO,EAAO,KAAKF,IAAIH,KAAKC,MAAOH,EAAQ,IAAc,MAEnDQ,KAAAA,gBAAgBP,EAAMG,EAAOE,EAAMC,GAG1CF,IAAII,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCH,gBAAgBP,EAAMG,EAAOE,EAAMC,GACjC1B,EAAO+B,eAAiBX,IACxBjB,EAAQ4B,eAAiBR,IACzBnB,EAAO2B,eAAiBN,IACxBpB,EAAO0B,eAAiBL,KAI5B,MAAMM,EAAQ,IAAI1B,EAAe,CAC/B2B,SAAU,WACVzB,WAAY,IAAIO,KAAK,KAAM,GAAI,GAAI,EAAG,EAAG,EAAG;;ACnD9C,aADA,QAAA,oBACA,QAAA","file":"src.c8ed9ae7.js","sourceRoot":"../src","sourcesContent":["const daysEl = document.querySelector('[data-value=\"days\"]');\nconst hoursEl = document.querySelector('[data-value=\"hours\"]');\nconst minsEl = document.querySelector('[data-value=\"mins\"]');\nconst secsEl = document.querySelector('[data-value=\"secs\"]');\n\nclass CountdownTimer {\n  constructor({ targetDate } = {}) {\n    this.targetDate = targetDate;\n    this.init();\n    this.stop();\n  }\n\n  init() {\n    this.getDeltaTime();\n    this.intervalId = setInterval(() => {\n      this.getDeltaTime();\n    }, 1000);\n  }\n\n  getDeltaTime() {\n    const deltaTime = this.targetDate - Date.now();\n    this.getTimeComponents(deltaTime);\n    if (deltaTime <= 0) {\n      clearInterval(this.intervalId);\n      getTimeComponents(0);\n      return;\n    }\n  }\n\n  getTimeComponents(time) {\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    this.updateClockface(days, hours, mins, secs);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  updateClockface(days, hours, mins, secs) {\n    daysEl.textContent = `${days}`;\n    hoursEl.textContent = `${hours}`;\n    minsEl.textContent = `${mins}`;\n    secsEl.textContent = `${secs}`;\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date(2021, 11, 10, 0, 0, 0, 0),\n});\n","import './sass/main.scss';\nimport './js/timer.js';\n"]}